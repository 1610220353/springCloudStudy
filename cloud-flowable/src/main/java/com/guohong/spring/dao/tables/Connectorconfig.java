/*
 * This file is generated by jOOQ.
 */
package com.guohong.spring.dao.tables;


import com.guohong.spring.dao.Indexes;
import com.guohong.spring.dao.Keys;
import com.guohong.spring.dao.Public;
import com.guohong.spring.dao.tables.records.ConnectorconfigRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * Table stores connector general configuration
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Connectorconfig extends TableImpl<ConnectorconfigRecord> {

    private static final long serialVersionUID = 1059641468;

    /**
     * The reference instance of <code>public.ConnectorConfig</code>
     */
    public static final Connectorconfig CONNECTORCONFIG = new Connectorconfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConnectorconfigRecord> getRecordType() {
        return ConnectorconfigRecord.class;
    }

    /**
     * The column <code>public.ConnectorConfig.id</code>.
     */
    public final TableField<ConnectorconfigRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.createdOn</code>.
     */
    public final TableField<ConnectorconfigRecord, Timestamp> CREATEDON = createField("createdOn", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.modifiedOn</code>.
     */
    public final TableField<ConnectorconfigRecord, Timestamp> MODIFIEDON = createField("modifiedOn", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.tenantId</code>.
     */
    public final TableField<ConnectorconfigRecord, String> TENANTID = createField("tenantId", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.groupId</code>.
     */
    public final TableField<ConnectorconfigRecord, String> GROUPID = createField("groupId", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.code</code>.
     */
    public final TableField<ConnectorconfigRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.name</code>.
     */
    public final TableField<ConnectorconfigRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.description</code>.
     */
    public final TableField<ConnectorconfigRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(400), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<ConnectorconfigRecord, Object> CONFIG = createField("config", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"jsonb\""), this, "");

    /**
     * The column <code>public.ConnectorConfig.connectorType</code>.
     */
    public final TableField<ConnectorconfigRecord, String> CONNECTORTYPE = createField("connectorType", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.loadingId</code>.
     */
    public final TableField<ConnectorconfigRecord, String> LOADINGID = createField("loadingId", org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.ConnectorConfig.status</code>.
     */
    public final TableField<ConnectorconfigRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.ConnectorConfig.udObjectType</code>.
     */
    public final TableField<ConnectorconfigRecord, String> UDOBJECTTYPE = createField("udObjectType", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>public.ConnectorConfig</code> table reference
     */
    public Connectorconfig() {
        this(DSL.name("ConnectorConfig"), null);
    }

    /**
     * Create an aliased <code>public.ConnectorConfig</code> table reference
     */
    public Connectorconfig(String alias) {
        this(DSL.name(alias), CONNECTORCONFIG);
    }

    /**
     * Create an aliased <code>public.ConnectorConfig</code> table reference
     */
    public Connectorconfig(Name alias) {
        this(alias, CONNECTORCONFIG);
    }

    private Connectorconfig(Name alias, Table<ConnectorconfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private Connectorconfig(Name alias, Table<ConnectorconfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table stores connector general configuration"));
    }

    public <O extends Record> Connectorconfig(Table<O> child, ForeignKey<O, ConnectorconfigRecord> key) {
        super(child, key, CONNECTORCONFIG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONNECTORCONFIG_ID_UINDEX, Indexes.CONNECTORCONFIG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConnectorconfigRecord> getPrimaryKey() {
        return Keys.CONNECTORCONFIG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConnectorconfigRecord>> getKeys() {
        return Arrays.<UniqueKey<ConnectorconfigRecord>>asList(Keys.CONNECTORCONFIG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Connectorconfig as(String alias) {
        return new Connectorconfig(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Connectorconfig as(Name alias) {
        return new Connectorconfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Connectorconfig rename(String name) {
        return new Connectorconfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Connectorconfig rename(Name name) {
        return new Connectorconfig(name, null);
    }
}
